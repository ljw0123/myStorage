1. 정규표현식
 1-1. 정규표현식 소개
  - 정규표현식(Regular expression)은 특정한 규칙을 가진
  문자열의 집합을 표현하는데 사용하는 '형식언어'이다.
  - 정규표현식은 많은 텍스트 편집기와 프로그래밍 언어에서
  '문자열의 검색과 치환'을 위해 지원하고 있다
  - 자바에서도 정규표현식을 1.4 부터 지우너하기 시작했으며,
  관련된 주요 클래스들은 java.util.regex 패키지에 포함되어
  있다. 

 1-2. 정규표현식 사용
  - boolean java.util.regex.Pattern.matches(String arg0,
		CharSequence arg1)
  - arg0 : 정규표현식 문자열
  - arg1 : 형식을 검사받기 위한 내용
  - 즉 위의 기능은 arg1이 arg0의 형식에 맞는지를 검사하고
  결과를 boolean으로 리턴한다.

2. 예외처리
 2-1. 에러 종류
  - 컴파일 에러
	-> 소스코드의 구문 오류로 인하여 컴파일이 불가능
 	한 상태
	-> 이클립스에서 빨간색으로 표시되는 경우에 해당
	-> 프로그램을 실행하기 전에 발견되므로 
	상대적으로 고치기 쉽다.

  - 런타임 에러
	-> 구문상의 에러는 없지만 프로그램이 실행되는 
	과정에서 다양한 경우의 수에 대응하지 못하여
	발생하는 예외상황
	-> 런타임에러가 발생하면 프로그램은 강제 종료
 	-> 우리가 프로그램의 에러라고 부르는 현상은
	대부분 런타임에러에 해당한다.

 2-2. 런타임에러 종류
  - 런타임 에러에는 프로그램 자체의 구조적인 문제로 인한 
  논리적 오류와 자바 가상 머신 자체의 문제로 인한 오류,
  그리고 예외가 있다. 
 - 논리적 오류
	-> 논리적 모순이 생기지 않도록 코드를 작성해야한다.

 - 자바 가상 머신 자체 오류
	-> 프로그래머가 채임질 수 있는 수준의 오류가 아니다.

 - 예외(Exception)
	-> 프로그램 실행 중에 발생할 수 있는 예기치 않은 
	사건으로, 프로그래머의 노력으로 처리할 수 있다. 
	-> 자바 가상 머신은 프로그램 실행중에 예외가 
	발생하면 관련된 예외 클래스로부터 예외 객체를
	생성하여 프로그램에서 지정된 예외 처리 구문으로
	넘긴다.
	-> 예외가 발생하면 프로그램에 지정된 예외 처리
	구문이 자바 가상머신에 의해 호출되고, 이때 전달되는
	예외 객체를 넘겨받아 적절한 처리를 수행한다. 

 2-3.자주 접하는 예외상황 클래스
 
 2-4. 예외처리
  - Java에서는 try ~ catch ~ finally 구문을 통해 프로그래머가
  예외 상황에 대응할 수 있도록 하고 있다. 

	try{
		// 기본적으로 실행되는 부분
	} catch(예외 클래스이름 객체이름){
		// try구문에서 예외가 발생한 경우 
		// 이 곳으로 제어가 넘어온다.
	} finally{
		// 예외 상황의 발생 여부에 상관없이 무조건
		// 실행되는 부분, finally 블록은 생략 가능
	}

  - try블록 실행 도중 catch에서 명시한 예외 클래스에
  해당하는 런타임 에러가 발생하면, try블록을 즉시 
  중단하고 catch 블록이 실행된 후, finally 블록이 실행된다.
  - 예외가 발생하지 않을 경우에는 try 블록 종료 후
  finally 블록이 실행 된다. 

 2-5. catch 블록을 사용한 복합 에러 처리
  - catch블록은 에러가 예상되는 상황에 대해 복수로 
  명시하는 것이 가능하다.

 2-6. Exception 클래스
  - Java에서 예외 상황을 의미하는 모든 클래스들의 
  최상위 클래스
  - 이 클래스의 이름으로 catch 블록을 구성하면, 모든 예외
  상황에 일괄적으로 대응할 수는 있지만, catch블록이 
  세분화 된 경우와는 달리 상황 별 개별적인 처리는 불가능.
  - Exception 클래스에 대한 예외처리는 대부분 맨 마지막
  catch 블록에 명시하여 '마지막 알 수 없는 에러'를 
  의미하도록 구성한다. 

	try{
		...
	} catch(NuberFormatException e){
		...
	} catch(ArrayIndexOutOfBoundsException e){
		... 
	} catch(Exception e){
		... 
	}

 2-7. 여러 객체 'e'의 기능
  - e.getMessage()
	-> 간략한 에러 메시지를 리턴한다
	-> e.getLocaliseMessage()도 같은 기능을 한다

  - e.printStackTrace()
	-> 실제 예외 상황시에 출력되는 메시지를 강제로
	출력한다.
	-> 개발자가 catch 블록 안에서 예외 상황을 분석하기
	위한 용도로 사용한다. 




































