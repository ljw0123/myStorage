SELECT * FROM EMPLOYEES e ;
------------------------------------
SELECT DEPARTMENT_ID  FROM EMPLOYEES e ;
SELECT * FROM DEPARTMENTS d ;
-- 모든 사원의 부서 이름 조회
-- inner join , 106
SELECT	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e 
	INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
ORDER BY d.DEPARTMENT_ID , e.EMPLOYEE_ID 
;
-- left outer join, 107
SELECT	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e 
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
ORDER BY d.DEPARTMENT_ID , e.EMPLOYEE_ID 
;

-- right outer join 
SELECT	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e 
	RIGHT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
ORDER BY d.DEPARTMENT_ID , e.EMPLOYEE_ID 
;

SELECT	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	DEPARTMENTS d 
	RIGHT OUTER JOIN EMPLOYEES e 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
ORDER BY d.DEPARTMENT_ID , e.EMPLOYEE_ID 
;

-- inner join
-- 사원 이름, email, 부서아이디, 부서명, job_id, job_title
-- city 컬럼을 추가 조회, 조건 : city가 Seattle인 도시만 조회 
-- 10분까지
SELECT	e.FIRST_NAME , e.LAST_NAME , e.EMAIL ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME ,
		j.JOB_ID , j.JOB_TITLE,
		l.LOCATION_ID , l.CITY 		
FROM 	EMPLOYEES e 
	INNER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
	INNER JOIN JOBS j 
	ON e.JOB_ID = j.JOB_ID 
	INNER JOIN LOCATIONS l 
	ON d.LOCATION_ID = l.LOCATION_ID 
WHERE 	l.CITY = 'Seattle'
;
-- left outer join
-- EMPLOYEE_ID, FIRST_NAME, HIRE_DATE, 
-- START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID
-- 단, EMPLOYEE_ID로 오름차순 정렬
SELECT	e.EMPLOYEE_ID , e.FIRST_NAME , e.HIRE_DATE ,
		jh.START_DATE , jh.END_DATE , jh.JOB_ID ,
		jh.DEPARTMENT_ID , e.DEPARTMENT_ID 
FROM 	EMPLOYEES e 
	right OUTER JOIN JOB_HISTORY jh 
	ON e.EMPLOYEE_ID = jh.EMPLOYEE_ID 
ORDER BY e.EMPLOYEE_ID 	
;
SELECT * FROM JOB_HISTORY jh ;

-- full outer join 
SELECT 	*
FROM 	EMPLOYEES e 
	FULL OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
ORDER BY e.EMPLOYEE_ID 
;
-- 문제1) 사원들의 이름, 부서번호, 부서명을 출력하라
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
;

-- 문제2) 30번 부서의 사원들의 이름,직업,부서명을 출력하라
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.DEPARTMENT_ID = 30	
;

-- 문제3) 커미션을 받는 사원의 이름, 직업, 부서번호,부서명을 출력하라
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.COMMISSION_PCT IS NOT NULL 
;

-- 문제4) 지역번호 2500 에서 근무하는 
-- 사원의 이름, 직업,부서번호,부서명을 출력하라
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE d.LOCATION_ID = 2500
;

-- 문제5) 이름에 A가 들어가는 사원들의 이름과 부서이름을 출력하라
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.FIRST_NAME LIKE '%A%'
;

-- 문제6) 사원이름과 그 사원의 관리자 이름을 출력하라
SELECT EMPLOYEE_ID , MANAGER_ID  FROM EMPLOYEES e ;
SELECT 	e.FIRST_NAME "사원명" , e2.FIRST_NAME "매니저명" 
FROM 	EMPLOYEES e 
	INNER JOIN EMPLOYEES e2 
	ON e.EMPLOYEE_ID = e2.MANAGER_ID 
;

-- 문제7) 사원이름과 부서명과 월급을 출력하는데 월급이 3000 이상인 
-- 사원을 출력하라
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME , e.SALARY ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.SALARY >= 3000
;

-- 문제8) 급여가 3000에서 5000사이인 사원의 이름과 소속부서명 출력하라
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME , e.SALARY ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE e.SALARY BETWEEN 3000 AND 5000
;

-- 문제9) Steven King의 부서명을 출력하라.
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME , e.SALARY ,
		d.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM 	EMPLOYEES e
	LEFT OUTER JOIN DEPARTMENTS d 
	ON e.DEPARTMENT_ID = d.DEPARTMENT_ID 
WHERE 	e.LAST_NAME = 'King'
AND 	e.FIRST_NAME = 'Steven'
;
-- subquery
-- 평균 급여보다 작은 사람
-- 6462
SELECT ROUND(AVG(SALARY))  FROM EMPLOYEES e ; 

SELECT 	*
FROM 	EMPLOYEES e 
WHERE 	SALARY  < (SELECT ROUND(AVG(SALARY))  
					FROM EMPLOYEES e)
;
SELECT 	LOCATION_ID  
FROM 	LOCATIONS l
WHERE 	COUNTRY_ID = 'US';

SELECT * FROM DEPARTMENTS d
WHERE 	LOCATION_ID IN (SELECT 	LOCATION_ID  
						FROM 	LOCATIONS l
						WHERE 	COUNTRY_ID = 'US')
;
-- 월급이 가장 적은 사원의 정보를 조회
SELECT 	*
FROM 	EMPLOYEES e
WHERE 	SALARY = (SELECT MIN(salary) FROM EMPLOYEES e)
;
SELECT MIN(salary) FROM EMPLOYEES e ; 

-- 월급이 가장 많은 사원의 정보를 조회
SELECT 	*
FROM 	EMPLOYEES e
WHERE 	SALARY = (SELECT MAX(salary) FROM EMPLOYEES e)
;

-- 평균 급여보다 많이 받는 사원들의
-- employee_id, first_name, last_name, job_title 조회
SELECT 	e.EMPLOYEE_ID , e.FIRST_NAME , e.LAST_NAME ,
		j.JOB_ID , j.JOB_TITLE 
FROM 	EMPLOYEES e 
	LEFT OUTER JOIN JOBS j 
	ON e.JOB_ID = j.JOB_ID 
WHERE 	e.SALARY > (SELECT 	AVG(SALARY)  
					FROM EMPLOYEES e)
;
SELECT 	AVG(SALARY)  FROM EMPLOYEES e ;

-- 문제1) EMPLOYEES 테이블에서 Kochhar의 급여보다 많은 
-- 사원의 정보를 사원번호,이름,담당업무,급여를 출력하라.
-- 17000
SELECT SALARY FROM EMPLOYEES e WHERE LAST_NAME = 'Kochhar';

SELECT 	EMPLOYEE_ID , FIRST_NAME , JOB_ID , SALARY 
FROM 	EMPLOYEES e 
WHERE 	SALARY > (	SELECT SALARY 
					FROM EMPLOYEES e 
					WHERE LAST_NAME = 'Kochhar')
;

-- 문제2) EMPLOYEES 테이블에서 급여의 평균보다 적은 사원의 
-- 사원번호,이름,담당업무(job_id),급여,부서번호를 출력하여라.  
SELECT AVG(SALARY)  FROM EMPLOYEES e;

SELECT 	EMPLOYEE_ID , FIRST_NAME , JOB_ID , 
		SALARY , DEPARTMENT_ID 
FROM 	EMPLOYEES e
WHERE 	SALARY < (SELECT AVG(SALARY)  FROM EMPLOYEES e)
;

-- 문제3) EMPLOYEES 테이블에서 (가장 많은 사원이 속해 있는 부서 번호)와 
-- 사원수를  출력하라.
SELECT 	DEPARTMENT_ID , COUNT(*) 
FROM 	EMPLOYEES e 
GROUP BY DEPARTMENT_ID 
HAVING COUNT(DEPARTMENT_ID) = (SELECT 	MAX(COUNT(*))  
								FROM 	EMPLOYEES e 
								GROUP BY DEPARTMENT_ID) 
;

SELECT 	MAX(COUNT(*))  
FROM 	EMPLOYEES e 
GROUP BY DEPARTMENT_ID; 


-- 문제4) EMPLOYEES 테이블에서 (사원번호가 123인 사원의 직업)과 같고 
-- (사원번호가 192인 사원의 급여(SAL))보다 많은 사원의 
-- 사원번호,이름,직업,급여를 출력하라.
SELECT 	EMPLOYEE_ID , FIRST_NAME , JOB_ID , SALARY 
FROM 	EMPLOYEES e 
WHERE  	JOB_ID = (SELECT job_id 
				 FROM EMPLOYEES e 
				 WHERE EMPLOYEE_ID = 123)
AND 	SALARY > (SELECT SALARY 
				  FROM EMPLOYEES e 
				  WHERE EMPLOYEE_ID = 192)
;
SELECT job_id FROM EMPLOYEES e WHERE EMPLOYEE_ID = 123;
SELECT SALARY FROM EMPLOYEES e WHERE EMPLOYEE_ID = 192;

-- 문제5) EMPLOYEES 테이블에서 (50번 부서의 최소 급여)를 받는 사원보다 
-- 많은 급여를 받는 
-- 사원의 사원번호,이름,업무,입사일자,급여,부서번호를 출력하라. 
-- 단 50번 부서는 제외
SELECT 	EMPLOYEE_ID , FIRST_NAME , JOB_ID , HIRE_DATE 
FROM 	EMPLOYEES e 
WHERE 	SALARY > (	SELECT MIN(SALARY) 
					FROM EMPLOYEES e 
					WHERE DEPARTMENT_ID = 50)
AND 	DEPARTMENT_ID <> 50
;

SELECT MIN(SALARY) 
FROM EMPLOYEES e 
WHERE DEPARTMENT_ID = 50
;









