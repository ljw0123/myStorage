1. revert
 git revert (돌아갈 커밋 해시)
 add George에 있는 변화만 골라서 제거, 다른 과정 유지

 git revert --continue : revert 그대로 진행

 - revert 명령어를 사용하면 자동 commit 까지 이루어진다.
 commit 은 하지않고 revert 하기, 원하는 다른 작업을 추가한
 다음에 함께 커밋
 git revert --no-commit (되돌릴 커밋 해시)
 
 - 취소하려면
 git reset --hard

2. branch  만들기
 - 분기된 가지
 - 프로젝트를 하나 이상의 모습응로 관리해야 할때
  예)실배포용, 테스트서버용, 새로운 시도용
 - 여러 작업들이 각각 독립되어 진행될 때
  예) 신기능1, 신기능2, ...
 - 각각의 가지(차원)에서 작업한 뒤 확정된 것을 메인 차원에
 통합

 2-1. 브랜치 생성/이동/삭제
 - add-coach란 이름의 브랜치 생성
 git branch add-coach

 - 브랜치 목록 확인
 git branch

 - add-coach 브랜치로 이동
 git switch add-coach

 - 브랜치 생성과 동시에 이동
 git switch -c (새브랜치명)
 브랜치명 : new-teams

 - 브랜치 삭제하기
 git branch -d (삭제할 브랜치명)

 - 브랜치 강제삭제
 git branch -D (삭제할 브랜치명)

 - 브랜치 이름 바꾸기
 git branch -m (기본 브랜치명) (새 브랜치명)


 2-2. 결과 살펴보기
 git log : 위치한 브랜치에서의 내역만 볼 수 있음
 git log --all --decorate --oneline --graph

 2-3. 서로 다른 브랜치를 합치는 두 방식
  - merge
	: 두 브랜치를 한 커밋에 이어 붙인다.
	브랜치 사용내역을 남길 필요가 있을 때 적합한 방식
  - rebase
	: 브랜치를 다른 브랜치에 이어 붙인다
	한 줄로 깔끔히 정리된 내역을 유지하기 위해 사용
	이미 팀원과 공유된 커밋들에 대해서는 사용하지
	않는 것이 좋다

 2-4. merge
 - add-coach 브랜치를 main 브랜치로 merge
 git merge add-coach

 2-5. rebase
 - new-teams 브랜치를 main 브랜치로 rebase
 - merge때와는 반대로 생각
 git rebase main

 2-6. 브랜치간 충돌 해결하기 - merge
 -  파일의 같은 위치에 다른 내용이 입력된 상황
 - 충돌 내용이 너무 많아서 merge를 중단해야 할 때는
	git merge --abort
 
 2-7. 브랜치간 충돌 해결하기 - rebase

3. Git Hub
 - 오픈소스의 성지

4. 토큰생성
 
5. Repository
 git remote add origin https://github.com/iamkj8812/git-test.git
	-> 로컬의 git 저장소에 원격 저장소로의 연결 추가
 git branch -M main
	-> github 권장, 기본 브랜치 명을 main으로
 git push -u origin main
	-> 로컬 저장소의 커밋 내역들 원격으로 push(업로드)
	-> main branch에서의 push는 늘 origin 원격소로 전달이 된다.

5. 원격저장소에 있는 코드 local로 가져오기
 git clone (원격저장소 주소)










